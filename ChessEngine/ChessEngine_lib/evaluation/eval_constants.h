#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(111, 80), S(425, 313), S(412, 308), S(548, 579), S(1337, 975), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(122, 174), S(155, 153), S(96, 142), S(153, 104), S(111, 123), S(194, 89), S(12, 159), S(-23, 194), S(4, 94), S(-3, 92), S(31, 70), S(39, 45), S(70, 23), S(89, 28), S(15, 65), S(-4, 76), S(-9, 33), S(5, 15), S(5, 7), S(33, -17), S(24, -6), S(24, -4), S(10, 7), S(-15, 17), S(-25, 15), S(-23, 7), S(-0, -6), S(21, -18), S(13, -8), S(21, -13), S(-6, -6), S(-21, 0), S(-16, 4), S(-23, 3), S(-2, -8), S(-2, -2), S(2, 4), S(17, -6), S(21, -14), S(-0, -9), S(-30, 22), S(-18, 9), S(-27, 18), S(-13, 17), S(-23, 25), S(37, 2), S(27, -5), S(-14, -3), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-208, -33), S(-121, -17), S(-55, 15), S(-47, -8), S(96, -24), S(-111, -6), S(-18, -57), S(-118, -89), S(-92, -4), S(-52, 16), S(94, -14), S(33, 24), S(31, 11), S(88, -15), S(3, -8), S(-14, -38), S(-43, -12), S(75, -6), S(53, 32), S(88, 27), S(122, 7), S(167, -0), S(102, -10), S(65, -37), S(4, -2), S(42, 16), S(33, 44), S(80, 40), S(60, 39), S(103, 25), S(46, 18), S(46, -8), S(3, -4), S(28, 7), S(43, 33), S(36, 42), S(57, 34), S(46, 29), S(45, 17), S(11, -8), S(-8, -17), S(10, 14), S(37, 8), S(45, 30), S(56, 20), S(50, 1), S(50, -14), S(3, -20), S(-9, -35), S(-33, -9), S(11, 10), S(32, 11), S(35, 16), S(44, -5), S(10, -14), S(7, -38), S(-119, -6), S(1, -34), S(-34, -4), S(-14, 5), S(17, -8), S(0, -6), S(5, -33), S(-8, -74)};
constexpr Score BISHOP_TABLE[] = {S(-27, -1), S(-2, -8), S(-147, 21), S(-95, 15), S(-66, 21), S(-63, 13), S(-33, 8), S(3, -13), S(-35, 14), S(-1, 5), S(-36, 17), S(-51, 6), S(21, 3), S(47, -2), S(4, 5), S(-55, 2), S(-19, 15), S(34, -3), S(39, -1), S(31, -4), S(33, -3), S(61, -1), S(34, 4), S(4, 16), S(1, 6), S(16, 5), S(13, 9), S(55, 1), S(37, 4), S(33, 3), S(17, -4), S(9, 12), S(9, -1), S(22, -1), S(15, 8), S(36, 8), S(42, -6), S(11, -0), S(17, -7), S(26, -5), S(16, -7), S(35, -4), S(32, 4), S(19, 5), S(27, 6), S(50, -8), S(35, -8), S(29, -12), S(24, -9), S(43, -19), S(33, -6), S(19, 5), S(29, 3), S(40, -2), S(66, -24), S(22, -24), S(-17, -8), S(23, 1), S(15, 5), S(7, 7), S(14, 5), S(13, 9), S(-25, 10), S(-1, -8)};
constexpr Score ROOK_TABLE[] = {S(12, 33), S(26, 27), S(-10, 41), S(43, 24), S(47, 26), S(-10, 36), S(6, 33), S(20, 26), S(14, 31), S(8, 36), S(56, 23), S(54, 23), S(87, 1), S(90, 11), S(2, 36), S(44, 21), S(-25, 32), S(-4, 31), S(-8, 29), S(2, 28), S(-24, 30), S(47, 11), S(80, 4), S(7, 15), S(-34, 29), S(-29, 27), S(-13, 36), S(1, 21), S(-8, 25), S(36, 17), S(-6, 17), S(-21, 25), S(-39, 26), S(-30, 29), S(-21, 30), S(-13, 24), S(-0, 15), S(2, 13), S(22, 7), S(-19, 12), S(-31, 16), S(-14, 19), S(-10, 11), S(-12, 16), S(5, 9), S(21, 3), S(15, 8), S(-10, 0), S(-21, 11), S(-5, 13), S(-10, 17), S(5, 17), S(14, 7), S(33, 2), S(19, 0), S(-43, 15), S(10, 14), S(10, 16), S(17, 15), S(30, 8), S(30, 4), S(39, 5), S(-7, 15), S(14, -4)};
constexpr Score QUEEN_TABLE[] = {S(-29, 4), S(-26, 50), S(-7, 42), S(2, 38), S(124, -12), S(106, -6), S(90, -13), S(59, 40), S(-28, 2), S(-61, 35), S(-21, 41), S(-18, 58), S(-57, 93), S(64, 22), S(21, 42), S(70, 13), S(-3, -20), S(-19, 2), S(7, -12), S(-18, 59), S(30, 40), S(78, 23), S(61, 27), S(67, 26), S(-37, 29), S(-28, 22), S(-25, 18), S(-25, 32), S(-7, 52), S(3, 55), S(-3, 90), S(1, 75), S(3, -27), S(-33, 34), S(-0, -4), S(-12, 39), S(4, 11), S(4, 31), S(2, 63), S(5, 46), S(-10, 9), S(17, -41), S(6, -2), S(19, -30), S(13, -7), S(17, 14), S(23, 28), S(13, 45), S(-16, -17), S(14, -37), S(32, -40), S(32, -42), S(45, -51), S(46, -36), S(20, -42), S(34, -31), S(20, -34), S(18, -48), S(29, -45), S(37, -10), S(18, -11), S(0, -17), S(-5, -9), S(-36, -31)};
constexpr Score KING_TABLE[] = {S(-125, -76), S(186, -73), S(192, -58), S(121, -48), S(-149, 13), S(-92, 34), S(56, -9), S(67, -29), S(227, -59), S(79, 4), S(42, 10), S(114, 1), S(42, 14), S(45, 35), S(-25, 29), S(-157, 38), S(80, -7), S(79, 12), S(111, 11), S(31, 16), S(49, 14), S(109, 38), S(137, 29), S(-20, 12), S(6, -18), S(-9, 25), S(17, 30), S(-43, 43), S(-48, 40), S(-65, 48), S(-24, 35), S(-106, 17), S(-92, -10), S(13, -4), S(-69, 38), S(-119, 51), S(-137, 57), S(-99, 43), S(-95, 25), S(-111, 1), S(-15, -25), S(-21, 0), S(-56, 24), S(-92, 41), S(-93, 43), S(-88, 34), S(-38, 14), S(-55, -7), S(-2, -39), S(5, -14), S(-44, 16), S(-100, 31), S(-76, 29), S(-55, 17), S(-2, -6), S(5, -29), S(-29, -70), S(37, -53), S(6, -27), S(-80, 2), S(-12, -24), S(-59, -6), S(25, -41), S(13, -68)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(59, -6), S(-6, 22), S(-65, 3)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(17, 6), S(-1, 15), S(-31, 15)};
constexpr Score PAWN_PROTECTION[] = {S(-1, 6), S(-0, 20), S(-2, 20), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score PAWN_PHALANX = S(4, 3);
constexpr Score PASSED_PAWN_BONUS = S(1, 20);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(5, -19);
constexpr Score ISOLATED_PAWN_PENALTY = S(-23, -10);
constexpr Score BISHOP_PAIR_BONUS = S(33, 57);
constexpr Score KNIGHT_MOBILITY = S(1, -1);
constexpr Score BISHOP_MOBILITY = S(7, 4);
constexpr Score ROOK_MOBILITY = S(6, 3);
constexpr Score QUEEN_MOBILITY = S(2, 7);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
