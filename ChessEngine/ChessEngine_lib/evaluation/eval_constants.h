#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(111, 82), S(420, 307), S(407, 308), S(542, 569), S(1314, 954), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(120, 173), S(152, 149), S(94, 140), S(148, 103), S(107, 120), S(188, 87), S(10, 155), S(-23, 191), S(4, 94), S(-4, 91), S(29, 70), S(38, 45), S(69, 25), S(87, 29), S(15, 65), S(-5, 76), S(-9, 34), S(4, 18), S(5, 10), S(32, -14), S(22, -4), S(23, 0), S(8, 10), S(-16, 18), S(-26, 18), S(-22, 10), S(1, -2), S(21, -14), S(13, -5), S(20, -8), S(-6, -1), S(-22, 3), S(-17, 5), S(-24, 5), S(-3, -5), S(-2, 2), S(1, 7), S(18, -4), S(19, -11), S(-1, -8), S(-28, 21), S(-16, 7), S(-25, 17), S(-13, 17), S(-21, 24), S(37, 2), S(29, -7), S(-13, -3), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-207, -34), S(-113, -21), S(-55, 10), S(-47, -12), S(89, -26), S(-110, -10), S(-21, -57), S(-118, -90), S(-92, -7), S(-54, 13), S(92, -19), S(32, 17), S(27, 6), S(86, -20), S(1, -9), S(-16, -40), S(-45, -14), S(74, -9), S(52, 26), S(86, 23), S(120, 2), S(164, -4), S(101, -13), S(63, -40), S(4, -6), S(41, 16), S(33, 43), S(80, 37), S(60, 38), S(101, 23), S(45, 18), S(44, -10), S(2, -6), S(29, 4), S(43, 29), S(36, 42), S(56, 31), S(46, 31), S(44, 18), S(10, -8), S(-8, -17), S(10, 12), S(37, 6), S(43, 24), S(56, 20), S(49, 1), S(51, -10), S(2, -19), S(-9, -39), S(-35, -11), S(10, 4), S(31, 5), S(34, 9), S(43, -10), S(8, -17), S(6, -40), S(-121, -6), S(-0, -38), S(-36, -7), S(-16, 1), S(15, -12), S(-1, -9), S(5, -37), S(-9, -72)};
constexpr Score BISHOP_TABLE[] = {S(-28, -2), S(-3, -9), S(-147, 20), S(-92, 14), S(-65, 20), S(-62, 11), S(-33, 6), S(2, -15), S(-34, 11), S(-1, 5), S(-35, 18), S(-51, 5), S(21, 3), S(45, -1), S(4, 5), S(-54, 1), S(-19, 14), S(31, 0), S(38, 2), S(29, 0), S(33, -0), S(60, 3), S(33, 7), S(4, 14), S(1, 5), S(14, 12), S(11, 16), S(53, 7), S(35, 11), S(32, 8), S(15, 3), S(9, 10), S(8, -2), S(21, 5), S(14, 13), S(35, 14), S(41, -1), S(10, 6), S(16, -1), S(24, -6), S(15, -8), S(33, -1), S(31, 8), S(18, 7), S(25, 13), S(48, -4), S(33, -1), S(28, -13), S(22, -10), S(42, -21), S(32, -7), S(18, 4), S(29, 1), S(38, -3), S(65, -26), S(20, -27), S(-18, -10), S(22, -2), S(14, 3), S(6, 4), S(13, 3), S(11, 6), S(-26, 9), S(-3, -11)};
constexpr Score ROOK_TABLE[] = {S(11, 29), S(25, 22), S(-12, 37), S(40, 21), S(47, 22), S(-12, 32), S(5, 28), S(20, 22), S(13, 28), S(7, 32), S(53, 20), S(54, 18), S(84, -2), S(89, 7), S(2, 32), S(43, 17), S(-24, 28), S(-6, 27), S(-8, 25), S(0, 24), S(-24, 25), S(45, 7), S(77, 1), S(7, 11), S(-34, 25), S(-29, 23), S(-15, 32), S(-1, 17), S(-9, 21), S(34, 13), S(-8, 13), S(-21, 21), S(-39, 22), S(-32, 25), S(-22, 26), S(-15, 20), S(-1, 11), S(0, 9), S(20, 4), S(-20, 9), S(-31, 12), S(-16, 16), S(-10, 8), S(-13, 13), S(3, 5), S(19, -0), S(13, 4), S(-11, -3), S(-21, 7), S(-6, 9), S(-11, 13), S(4, 13), S(13, 3), S(31, -1), S(18, -3), S(-43, 11), S(9, 10), S(8, 12), S(16, 12), S(29, 4), S(29, -0), S(38, 1), S(-8, 11), S(12, -7)};
constexpr Score QUEEN_TABLE[] = {S(-28, 2), S(-27, 50), S(-8, 42), S(2, 36), S(121, -12), S(102, -5), S(87, -12), S(61, 37), S(-28, 1), S(-59, 33), S(-21, 40), S(-18, 57), S(-55, 90), S(61, 23), S(23, 39), S(69, 13), S(-3, -21), S(-18, 1), S(8, -15), S(-18, 58), S(30, 38), S(76, 22), S(62, 24), S(67, 25), S(-37, 28), S(-27, 20), S(-25, 16), S(-25, 30), S(-7, 50), S(4, 51), S(-3, 87), S(1, 74), S(2, -27), S(-32, 33), S(-0, -4), S(-13, 38), S(3, 10), S(4, 30), S(1, 62), S(5, 45), S(-10, 9), S(17, -40), S(5, -2), S(19, -31), S(12, -8), S(16, 14), S(23, 27), S(13, 43), S(-16, -16), S(14, -38), S(32, -40), S(31, -41), S(44, -51), S(45, -37), S(20, -40), S(32, -29), S(19, -33), S(18, -49), S(28, -44), S(36, -10), S(17, -10), S(0, -16), S(-4, -9), S(-37, -31)};
constexpr Score KING_TABLE[] = {S(-122, -76), S(190, -74), S(188, -57), S(114, -47), S(-144, 12), S(-80, 30), S(51, -7), S(64, -30), S(227, -60), S(79, 3), S(46, 8), S(120, -1), S(42, 13), S(45, 34), S(-29, 29), S(-153, 38), S(76, -6), S(78, 12), S(108, 10), S(30, 16), S(51, 13), S(110, 36), S(136, 27), S(-17, 11), S(1, -16), S(-10, 25), S(18, 29), S(-39, 41), S(-47, 39), S(-64, 47), S(-27, 34), S(-106, 17), S(-92, -9), S(13, -4), S(-68, 38), S(-119, 50), S(-135, 55), S(-97, 41), S(-94, 24), S(-109, 0), S(-14, -25), S(-22, 1), S(-56, 24), S(-91, 39), S(-91, 42), S(-86, 33), S(-37, 12), S(-55, -6), S(-3, -38), S(4, -13), S(-43, 16), S(-99, 30), S(-76, 28), S(-55, 17), S(-1, -6), S(5, -28), S(-30, -68), S(34, -51), S(5, -26), S(-80, 3), S(-13, -22), S(-59, -5), S(24, -40), S(11, -66)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(58, -6), S(-6, 22), S(-64, 3)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(17, 6), S(-1, 15), S(-30, 15)};
constexpr Score PAWN_PROTECTION[NPIECE_TYPES] = { S(1, 1), S(20, 20), S(20, 20), S(20, 20), S(20, 20), S(20, 20) };
constexpr Score PASSED_PAWN_BONUS = S(1, 19);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(5, -19);
constexpr Score ISOLATED_PAWN_PENALTY = S(-23, -14);
constexpr Score BISHOP_PAIR_BONUS = S(33, 54);
constexpr Score KNIGHT_MOBILITY = S(1, 0);
constexpr Score BISHOP_MOBILITY = S(6, 3);
constexpr Score ROOK_MOBILITY = S(6, 3);
constexpr Score QUEEN_MOBILITY = S(2, 7);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
