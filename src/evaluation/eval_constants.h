#pragma once
#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(102, 105), S(437, 363), S(449, 375), S(608, 705), S(1390, 1310), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(191, 170), S(171, 159), S(111, 156), S(187, 98), S(123, 116), S(157, 111), S(-25, 174), S(11, 192), S(-11, 109), S(6, 102), S(40, 73), S(55, 48), S(65, 36), S(83, 39), S(-1, 76), S(-0, 86), S(-11, 33), S(-8, 19), S(1, 12), S(24, -16), S(18, -4), S(34, 3), S(-2, 17), S(-8, 20), S(-15, 14), S(-18, 9), S(-1, -7), S(15, -16), S(14, -7), S(17, -11), S(-2, -1), S(-13, 0), S(-16, 2), S(-25, 4), S(-9, -3), S(-1, -5), S(4, 8), S(-10, 7), S(-12, -3), S(-27, -2), S(-15, 19), S(-15, 10), S(-17, 21), S(-6, 10), S(-6, 24), S(4, 20), S(2, 1), S(-36, 2), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-206, -12), S(-136, 16), S(-66, 40), S(-6, 14), S(98, 9), S(-139, 33), S(-46, -17), S(-127, -67), S(-26, 13), S(-38, 33), S(66, 17), S(28, 50), S(21, 44), S(82, 7), S(-17, 27), S(-8, 4), S(-25, 12), S(49, 22), S(50, 63), S(79, 63), S(99, 41), S(121, 43), S(68, 20), S(51, -10), S(30, 20), S(39, 39), S(46, 67), S(78, 69), S(47, 75), S(75, 68), S(39, 45), S(53, 24), S(14, 23), S(20, 29), S(41, 59), S(50, 66), S(60, 62), S(50, 60), S(74, 33), S(26, 34), S(-7, -8), S(13, 21), S(31, 23), S(34, 52), S(52, 37), S(43, 16), S(39, -0), S(7, 21), S(-16, -14), S(-6, 10), S(15, 12), S(35, 29), S(34, 36), S(33, 5), S(13, 26), S(33, -15), S(-94, 4), S(11, -5), S(-15, 15), S(4, 30), S(31, 9), S(17, 19), S(12, 9), S(-22, -25)};
constexpr Score BISHOP_TABLE[] = {S(-24, 26), S(12, 25), S(-99, 46), S(-52, 40), S(-49, 47), S(-82, 38), S(4, 28), S(13, 19), S(-32, 43), S(24, 27), S(6, 41), S(-25, 39), S(29, 36), S(49, 27), S(10, 33), S(-31, 39), S(17, 29), S(35, 28), S(64, 26), S(34, 32), S(56, 26), S(70, 39), S(74, 32), S(26, 42), S(-6, 32), S(36, 34), S(18, 45), S(76, 37), S(55, 38), S(60, 33), S(40, 45), S(13, 44), S(10, 21), S(19, 34), S(31, 43), S(57, 43), S(65, 34), S(25, 38), S(20, 27), S(49, 11), S(23, 15), S(37, 31), S(34, 35), S(33, 35), S(32, 46), S(41, 31), S(33, 23), S(43, 14), S(38, 9), S(42, 9), S(39, 20), S(23, 33), S(31, 29), S(30, 11), S(61, 29), S(26, 6), S(43, 3), S(45, 21), S(18, 49), S(19, 28), S(7, 34), S(12, 45), S(10, 32), S(19, 7)};
constexpr Score ROOK_TABLE[] = {S(23, 56), S(29, 53), S(-12, 64), S(2, 59), S(39, 52), S(9, 54), S(32, 48), S(62, 47), S(6, 57), S(9, 59), S(31, 52), S(39, 55), S(66, 36), S(91, 28), S(30, 49), S(51, 41), S(-10, 51), S(24, 45), S(35, 44), S(42, 42), S(64, 27), S(101, 24), S(144, 7), S(46, 25), S(-8, 44), S(2, 43), S(24, 46), S(46, 36), S(28, 43), S(50, 38), S(29, 32), S(10, 39), S(-24, 41), S(-22, 47), S(-10, 46), S(-3, 43), S(5, 40), S(19, 26), S(45, 25), S(2, 24), S(-30, 27), S(-17, 34), S(-14, 26), S(-9, 29), S(-5, 29), S(15, 20), S(31, 17), S(3, 10), S(-39, 26), S(-12, 21), S(-17, 32), S(-10, 27), S(4, 23), S(14, 15), S(21, 10), S(-57, 32), S(-10, 35), S(-9, 33), S(-6, 33), S(5, 23), S(6, 23), S(11, 26), S(-5, 26), S(5, 14)};
constexpr Score QUEEN_TABLE[] = {S(-14, -13), S(-28, 43), S(-12, 40), S(15, 11), S(75, 17), S(69, 8), S(79, 2), S(75, 4), S(-12, 15), S(-49, 41), S(-17, 58), S(-10, 64), S(-31, 88), S(32, 63), S(7, 66), S(63, 17), S(-1, 2), S(-1, 14), S(6, 21), S(-32, 94), S(-6, 89), S(97, 43), S(100, 20), S(18, 80), S(-9, 1), S(-7, 36), S(-15, 49), S(-15, 69), S(-5, 90), S(27, 63), S(32, 86), S(17, 88), S(4, -16), S(1, 34), S(13, 19), S(-1, 63), S(12, 43), S(20, 59), S(31, 55), S(26, 21), S(-12, -2), S(32, -50), S(20, 2), S(12, -6), S(19, 10), S(24, 11), S(43, -6), S(19, 27), S(-18, -9), S(18, -54), S(34, -56), S(22, -15), S(31, -32), S(34, -53), S(36, -69), S(5, -35), S(11, -34), S(-6, -33), S(10, -35), S(22, -2), S(10, -35), S(2, -54), S(17, -58), S(-17, -66)};
constexpr Score KING_TABLE[] = {S(-102, -98), S(200, -83), S(196, -61), S(128, -57), S(-135, 2), S(-82, 25), S(107, -17), S(-0, -32), S(206, -65), S(100, 10), S(106, 9), S(124, -1), S(67, 13), S(98, 22), S(11, 35), S(-169, 26), S(46, 2), S(119, 13), S(123, 23), S(56, 16), S(92, 9), S(147, 37), S(178, 31), S(-21, 11), S(4, -13), S(57, 19), S(29, 34), S(11, 41), S(-17, 37), S(22, 31), S(15, 25), S(-114, 12), S(-87, -16), S(79, -17), S(5, 23), S(-46, 44), S(-47, 41), S(-32, 26), S(-31, 11), S(-96, -9), S(-33, -25), S(-12, 0), S(-29, 16), S(-42, 31), S(-33, 30), S(-28, 15), S(-16, 2), S(-47, -18), S(-28, -31), S(-39, -9), S(-22, 9), S(-76, 23), S(-49, 19), S(-44, 14), S(-42, 2), S(-36, -24), S(-55, -79), S(-13, -48), S(-55, -11), S(-72, -4), S(-80, -9), S(-43, -15), S(-25, -30), S(-32, -76)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(43, 3), S(-11, 33), S(-62, 0)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(16, 8), S(-3, 29), S(-27, 12)};
constexpr Score PAWN_PROTECTION[] = {S(4, 3), S(1, 20), S(1, 17), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score ATTACKED_BY_PAWN[] = {S(0, 0), S(-53, -14), S(-61, -42), S(-94, 23), S(-64, 16), S(0, 0)};
constexpr Score KING_RING_ATTACK_BONUS[] = {S(20, -12), S(31, -11), S(20, -5), S(35, -9), S(31, 7), S(0, 0)};
constexpr Score CHECK_BONUS[] = {S(248, -23), S(107, -2), S(64, 47), S(127, -18), S(66, 74), S(0, 0)};
constexpr Score KING_PAWN_SHIELD[] = {S(40, -14), S(31, -8)};
constexpr Score PASSED_PAWN_BONUS = S(-0, 23);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(4, -21);
constexpr Score ISOLATED_PAWN_PENALTY = S(-16, -14);
constexpr Score DOUBLED_PAWN_PENALTY = S(-16, -18);
constexpr Score BISHOP_PAIR_BONUS = S(28, 77);
constexpr Score KNIGHT_MOBILITY[] = {S(-40, 1), S(-17, -9), S(-6, -13), S(-2, -2), S(7, 2), S(11, 12), S(20, 11), S(25, 8), S(43, -13)};
constexpr Score BISHOP_MOBILITY[] = {S(-38, 6), S(-20, -32), S(-8, -21), S(1, -8), S(11, 1), S(16, 12), S(19, 22), S(17, 27), S(25, 30), S(26, 29), S(32, 29), S(53, 24), S(38, 38), S(89, 13)};
constexpr Score ROOK_MOBILITY[] = {S(-39, -42), S(-22, -36), S(-18, -23), S(-8, -32), S(-5, -13), S(-12, 6), S(-4, 5), S(2, 8), S(7, 15), S(16, 18), S(19, 21), S(26, 27), S(35, 25), S(32, 23), S(69, 10)};
constexpr Score QUEEN_MOBILITY[] = {S(-99, -0), S(-16, -76), S(-29, 35), S(-28, -33), S(-31, 44), S(-26, 5), S(-25, 3), S(-22, 3), S(-21, -8), S(-16, -13), S(-15, -1), S(-16, 10), S(-12, 11), S(-9, 16), S(-7, 16), S(-8, 27), S(-9, 30), S(0, 24), S(-6, 35), S(4, 26), S(36, -1), S(20, 17), S(-7, 30), S(48, 16), S(61, -10), S(114, -51), S(51, -25), S(264, -134)};

template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
