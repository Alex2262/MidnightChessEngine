#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(107, 79), S(408, 304), S(395, 303), S(533, 556), S(1265, 938), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(107, 171), S(143, 147), S(86, 138), S(136, 102), S(100, 119), S(179, 87), S(13, 152), S(-38, 190), S(-5, 94), S(-6, 90), S(23, 69), S(30, 45), S(67, 23), S(80, 29), S(19, 63), S(-12, 76), S(-18, 35), S(2, 18), S(2, 11), S(27, -13), S(28, -7), S(18, 1), S(12, 8), S(-20, 19), S(-32, 19), S(-24, 10), S(-0, -2), S(18, -13), S(24, -9), S(17, -8), S(-2, -2), S(-24, 4), S(-21, 6), S(-25, 6), S(-3, -4), S(-3, 3), S(12, 3), S(17, -4), S(24, -12), S(-2, -7), S(-29, 21), S(-17, 7), S(-25, 18), S(-14, 19), S(-6, 18), S(35, 1), S(33, -9), S(-11, -4), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-208, -33), S(-116, -23), S(-51, 7), S(-52, -12), S(86, -28), S(-111, -10), S(-21, -59), S(-119, -88), S(-94, -7), S(-53, 10), S(87, -19), S(30, 15), S(24, 5), S(80, -20), S(-0, -11), S(-18, -41), S(-43, -16), S(72, -11), S(51, 24), S(80, 22), S(113, 1), S(157, -6), S(100, -15), S(62, -40), S(0, -7), S(37, 13), S(29, 41), S(75, 35), S(55, 35), S(95, 21), S(39, 17), S(39, -11), S(-0, -8), S(23, 3), S(39, 27), S(31, 39), S(50, 29), S(41, 28), S(40, 15), S(6, -9), S(-11, -18), S(6, 9), S(33, 4), S(39, 21), S(51, 18), S(45, -2), S(44, -13), S(-0, -22), S(-9, -42), S(-38, -12), S(6, 2), S(27, 2), S(30, 7), S(43, -14), S(0, -18), S(3, -44), S(-121, -10), S(1, -38), S(-36, -10), S(-13, -3), S(15, -15), S(-4, -12), S(5, -39), S(-15, -72)};
constexpr Score BISHOP_TABLE[] = {S(-34, -2), S(-9, -9), S(-144, 18), S(-90, 12), S(-66, 19), S(-59, 9), S(-32, 5), S(-1, -14), S(-37, 11), S(-2, 3), S(-35, 16), S(-51, 4), S(17, 3), S(50, -3), S(4, 4), S(-58, 2), S(-21, 14), S(31, -1), S(35, 1), S(28, -1), S(26, 0), S(56, 2), S(32, 6), S(2, 13), S(-3, 5), S(10, 11), S(11, 14), S(48, 7), S(34, 9), S(26, 8), S(12, 2), S(5, 10), S(4, -3), S(19, 3), S(11, 11), S(31, 13), S(37, -1), S(7, 5), S(12, -2), S(21, -7), S(14, -10), S(29, -2), S(28, 6), S(15, 6), S(23, 11), S(44, -5), S(29, -2), S(22, -13), S(22, -12), S(39, -22), S(29, -8), S(16, 2), S(25, -0), S(35, -4), S(58, -27), S(19, -28), S(-19, -11), S(20, -3), S(15, 1), S(8, 2), S(11, 2), S(10, 5), S(-24, 7), S(-8, -11)};
constexpr Score ROOK_TABLE[] = {S(20, 21), S(34, 14), S(-4, 30), S(53, 12), S(47, 17), S(-24, 29), S(-3, 24), S(19, 16), S(23, 20), S(17, 24), S(64, 12), S(70, 10), S(93, -9), S(85, 2), S(14, 22), S(42, 12), S(-21, 22), S(4, 20), S(6, 17), S(13, 17), S(-10, 17), S(43, 2), S(73, -4), S(8, 7), S(-33, 21), S(-29, 19), S(-11, 27), S(7, 11), S(0, 14), S(24, 10), S(-14, 10), S(-28, 18), S(-48, 22), S(-33, 22), S(-15, 21), S(-14, 17), S(2, 8), S(-12, 8), S(9, 2), S(-35, 9), S(-40, 12), S(-21, 14), S(-8, 4), S(-11, 10), S(8, 1), S(6, -0), S(-0, 4), S(-26, -2), S(-31, 6), S(-8, 6), S(-7, 9), S(6, 11), S(18, -2), S(23, -2), S(10, -4), S(-52, 10), S(-1, 5), S(4, 9), S(23, 5), S(33, 0), S(35, -6), S(25, -1), S(-13, 9), S(2, -11)};
constexpr Score QUEEN_TABLE[] = {S(-30, 1), S(-29, 47), S(-16, 45), S(-8, 40), S(110, -10), S(105, -14), S(76, -9), S(57, 33), S(-29, 0), S(-58, 29), S(-20, 37), S(-13, 50), S(-51, 82), S(59, 17), S(19, 37), S(63, 13), S(-5, -23), S(-24, 2), S(5, -18), S(-20, 55), S(23, 36), S(70, 17), S(58, 17), S(63, 23), S(-37, 24), S(-28, 17), S(-26, 14), S(-24, 24), S(-9, 45), S(-1, 45), S(-6, 78), S(-0, 68), S(1, -28), S(-33, 30), S(-2, -8), S(-13, 32), S(-1, 8), S(0, 22), S(0, 53), S(3, 42), S(-12, 9), S(14, -40), S(2, -2), S(16, -33), S(10, -8), S(13, 8), S(20, 22), S(9, 42), S(-16, -14), S(11, -36), S(28, -38), S(28, -40), S(39, -49), S(43, -40), S(15, -40), S(29, -29), S(20, -34), S(21, -53), S(31, -46), S(36, -6), S(19, -13), S(-2, -20), S(-4, -8), S(-37, -29)};
constexpr Score KING_TABLE[] = {S(-99, -78), S(181, -72), S(179, -56), S(102, -45), S(-151, 13), S(-82, 30), S(51, -6), S(58, -28), S(227, -59), S(67, 4), S(37, 9), S(109, -1), S(31, 14), S(42, 34), S(-31, 30), S(-147, 38), S(73, -6), S(73, 11), S(94, 11), S(15, 16), S(38, 14), S(111, 35), S(130, 28), S(-7, 10), S(13, -19), S(-14, 24), S(12, 27), S(-52, 40), S(-56, 38), S(-60, 47), S(-22, 34), S(-95, 16), S(-93, -8), S(12, -5), S(-74, 37), S(-134, 50), S(-139, 54), S(-94, 42), S(-87, 24), S(-106, 2), S(-6, -25), S(-20, 1), S(-58, 23), S(-97, 38), S(-95, 42), S(-83, 34), S(-34, 14), S(-50, -4), S(0, -36), S(5, -12), S(-44, 16), S(-100, 28), S(-78, 28), S(-54, 18), S(0, -4), S(9, -26), S(-26, -65), S(42, -49), S(12, -26), S(-93, 2), S(-13, -21), S(-48, -5), S(32, -38), S(18, -63)};
constexpr Score PASSED_PAWN_BONUS = S(1, 19);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(5, -20);
constexpr Score ISOLATED_PAWN_PENALTY = S(-23, -13);
constexpr Score BISHOP_PAIR_BONUS = S(32, 53);
constexpr Score KNIGHT_MOBILITY = S(1, 0);
constexpr Score BISHOP_MOBILITY = S(6, 3);
constexpr Score ROOK_MOBILITY = S(8, 3);
constexpr Score QUEEN_MOBILITY = S(2, 8);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
