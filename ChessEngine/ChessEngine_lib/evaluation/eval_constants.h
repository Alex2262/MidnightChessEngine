#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(111, 80), S(420, 309), S(409, 305), S(542, 573), S(1319, 962), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(122, 172), S(153, 150), S(96, 140), S(151, 103), S(110, 121), S(191, 88), S(12, 157), S(-23, 192), S(4, 93), S(-4, 91), S(30, 69), S(39, 44), S(69, 23), S(87, 28), S(14, 64), S(-4, 75), S(-9, 33), S(4, 15), S(5, 7), S(32, -17), S(22, -6), S(24, -4), S(9, 7), S(-16, 16), S(-26, 15), S(-22, 7), S(2, -6), S(21, -18), S(14, -8), S(20, -12), S(-6, -5), S(-22, 0), S(-17, 4), S(-24, 3), S(-2, -8), S(-2, -2), S(1, 4), S(18, -6), S(20, -13), S(-1, -9), S(-28, 22), S(-18, 8), S(-25, 17), S(-13, 16), S(-22, 24), S(37, 1), S(28, -6), S(-12, -3), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-206, -33), S(-118, -18), S(-55, 15), S(-44, -9), S(93, -24), S(-110, -7), S(-17, -57), S(-116, -88), S(-90, -5), S(-53, 15), S(94, -15), S(32, 23), S(31, 10), S(88, -15), S(2, -8), S(-15, -37), S(-44, -12), S(74, -6), S(53, 31), S(87, 26), S(121, 6), S(165, -1), S(101, -10), S(65, -38), S(4, -3), S(41, 15), S(32, 43), S(79, 39), S(59, 38), S(102, 24), S(45, 17), S(45, -9), S(2, -5), S(27, 6), S(42, 31), S(35, 41), S(57, 33), S(45, 28), S(43, 16), S(10, -9), S(-9, -17), S(9, 13), S(36, 7), S(43, 28), S(55, 19), S(48, 0), S(49, -14), S(2, -21), S(-9, -35), S(-33, -9), S(10, 8), S(31, 10), S(34, 15), S(44, -6), S(9, -15), S(6, -38), S(-118, -6), S(0, -34), S(-34, -5), S(-15, 4), S(16, -9), S(-0, -7), S(5, -33), S(-9, -74)};
constexpr Score BISHOP_TABLE[] = {S(-28, -2), S(-2, -10), S(-147, 20), S(-93, 14), S(-66, 19), S(-63, 11), S(-31, 7), S(2, -14), S(-35, 12), S(-1, 3), S(-35, 16), S(-50, 4), S(21, 2), S(47, -3), S(4, 3), S(-55, 2), S(-19, 14), S(33, -4), S(38, -2), S(30, -5), S(34, -5), S(60, -2), S(34, 3), S(4, 15), S(1, 5), S(15, 4), S(12, 8), S(54, -1), S(36, 3), S(32, 2), S(16, -5), S(9, 11), S(8, -2), S(21, -2), S(15, 7), S(35, 7), S(42, -7), S(11, -1), S(16, -8), S(24, -6), S(15, -8), S(33, -5), S(31, 2), S(19, 4), S(26, 5), S(48, -9), S(34, -9), S(27, -13), S(22, -10), S(42, -19), S(32, -8), S(18, 4), S(28, 2), S(39, -3), S(65, -25), S(20, -25), S(-18, -9), S(22, -0), S(14, 4), S(6, 6), S(13, 4), S(12, 7), S(-25, 9), S(-3, -9)};
constexpr Score ROOK_TABLE[] = {S(11, 31), S(26, 24), S(-12, 39), S(41, 22), S(46, 24), S(-11, 33), S(6, 30), S(18, 24), S(13, 29), S(7, 34), S(54, 21), S(53, 21), S(85, -1), S(87, 9), S(1, 33), S(43, 18), S(-25, 29), S(-5, 28), S(-8, 27), S(1, 26), S(-25, 27), S(46, 8), S(78, 2), S(6, 12), S(-34, 26), S(-29, 24), S(-14, 34), S(-0, 19), S(-9, 22), S(34, 14), S(-7, 15), S(-21, 23), S(-39, 24), S(-31, 27), S(-22, 28), S(-14, 21), S(-1, 13), S(0, 11), S(21, 5), S(-21, 10), S(-31, 14), S(-15, 17), S(-11, 9), S(-13, 14), S(4, 7), S(19, 1), S(13, 6), S(-11, -2), S(-21, 9), S(-5, 11), S(-11, 15), S(4, 15), S(13, 5), S(31, 0), S(18, -2), S(-43, 13), S(9, 12), S(9, 13), S(16, 13), S(29, 6), S(29, 2), S(38, 3), S(-8, 13), S(13, -6)};
constexpr Score QUEEN_TABLE[] = {S(-28, 2), S(-27, 50), S(-7, 41), S(2, 37), S(122, -12), S(105, -7), S(88, -13), S(60, 38), S(-28, 1), S(-59, 33), S(-21, 40), S(-18, 57), S(-56, 90), S(63, 22), S(22, 41), S(69, 12), S(-3, -21), S(-19, 1), S(8, -14), S(-17, 58), S(30, 39), S(78, 21), S(61, 25), S(67, 25), S(-37, 28), S(-28, 21), S(-25, 17), S(-25, 31), S(-7, 51), S(4, 53), S(-4, 88), S(1, 74), S(2, -27), S(-32, 33), S(-0, -4), S(-12, 38), S(4, 9), S(4, 31), S(1, 62), S(5, 45), S(-10, 9), S(17, -41), S(5, -2), S(19, -30), S(12, -7), S(16, 13), S(23, 27), S(13, 43), S(-17, -16), S(14, -37), S(31, -39), S(31, -40), S(43, -50), S(45, -36), S(20, -41), S(32, -30), S(19, -33), S(18, -48), S(28, -45), S(36, -10), S(17, -10), S(-0, -17), S(-5, -9), S(-36, -30)};
constexpr Score KING_TABLE[] = {S(-122, -76), S(185, -73), S(189, -58), S(119, -48), S(-146, 13), S(-93, 33), S(56, -9), S(65, -29), S(223, -58), S(78, 4), S(43, 9), S(112, 2), S(42, 14), S(44, 34), S(-25, 29), S(-156, 37), S(80, -7), S(77, 12), S(109, 11), S(30, 16), S(48, 14), S(108, 37), S(136, 28), S(-20, 11), S(5, -18), S(-9, 25), S(16, 30), S(-43, 42), S(-47, 40), S(-64, 48), S(-23, 35), S(-105, 17), S(-91, -10), S(12, -4), S(-68, 38), S(-117, 50), S(-135, 56), S(-98, 42), S(-93, 24), S(-110, 0), S(-14, -25), S(-20, 0), S(-55, 23), S(-91, 40), S(-91, 42), S(-87, 33), S(-37, 13), S(-54, -7), S(-2, -39), S(5, -14), S(-43, 16), S(-99, 31), S(-76, 28), S(-54, 17), S(-0, -6), S(6, -29), S(-29, -69), S(36, -52), S(6, -27), S(-79, 2), S(-12, -23), S(-59, -6), S(24, -40), S(12, -67)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(58, -6), S(-5, 22), S(-64, 3)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(17, 6), S(-1, 15), S(-31, 14)};
constexpr Score PAWN_PROTECTION[] = {S(-1, 6), S(0, 19), S(-2, 20), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score PASSED_PAWN_BONUS = S(1, 20);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(5, -19);
constexpr Score ISOLATED_PAWN_PENALTY = S(-24, -10);
constexpr Score BISHOP_PAIR_BONUS = S(32, 57);
constexpr Score KNIGHT_MOBILITY = S(1, -1);
constexpr Score BISHOP_MOBILITY = S(6, 4);
constexpr Score ROOK_MOBILITY = S(6, 3);
constexpr Score QUEEN_MOBILITY = S(2, 7);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
