#pragma once
#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(99, 87), S(406, 335), S(395, 331), S(523, 629), S(1247, 1116), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(183, 160), S(172, 150), S(109, 142), S(203, 87), S(145, 101), S(206, 89), S(14, 155), S(-11, 187), S(-16, 102), S(7, 93), S(48, 64), S(52, 42), S(75, 25), S(85, 29), S(9, 64), S(-0, 77), S(-13, 32), S(2, 16), S(8, 7), S(37, -21), S(31, -9), S(39, -6), S(14, 7), S(-8, 16), S(-18, 15), S(-15, 6), S(4, -9), S(22, -18), S(18, -11), S(23, -16), S(4, -9), S(-9, -2), S(-16, 3), S(-23, 4), S(-2, -6), S(4, -8), S(10, 3), S(-8, 3), S(-7, -4), S(-23, -0), S(-24, 22), S(-20, 14), S(-21, 23), S(-13, 16), S(-15, 26), S(0, 20), S(-4, 8), S(-38, 6), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-214, -33), S(-119, -2), S(-50, 23), S(-30, 4), S(101, -15), S(-132, 15), S(-5, -46), S(-116, -86), S(-45, -1), S(-48, 20), S(74, 6), S(36, 39), S(54, 21), S(83, -4), S(-4, 3), S(-13, -15), S(-34, -0), S(42, 15), S(57, 39), S(83, 43), S(115, 19), S(153, 19), S(95, 0), S(58, -28), S(14, 5), S(29, 31), S(42, 52), S(67, 58), S(50, 58), S(74, 51), S(39, 33), S(39, 5), S(-1, 6), S(7, 23), S(32, 46), S(34, 53), S(49, 49), S(39, 41), S(47, 25), S(7, 11), S(-16, -26), S(5, 17), S(27, 14), S(30, 42), S(43, 26), S(37, 7), S(34, -6), S(-7, -7), S(-27, -25), S(-23, -2), S(4, 9), S(19, 23), S(20, 29), S(25, 4), S(6, 8), S(13, -32), S(-112, -14), S(-11, -29), S(-41, 3), S(-11, 11), S(-0, 2), S(-2, 5), S(-7, -19), S(-46, -49)};
constexpr Score BISHOP_TABLE[] = {S(-24, 5), S(-1, 8), S(-130, 33), S(-67, 24), S(-56, 30), S(-64, 24), S(-23, 21), S(-17, 7), S(-38, 28), S(0, 12), S(-15, 24), S(-45, 21), S(15, 21), S(52, 8), S(3, 16), S(-35, 17), S(-14, 21), S(19, 14), S(40, 8), S(22, 12), S(40, 4), S(50, 15), S(47, 17), S(9, 31), S(-10, 18), S(9, 20), S(6, 23), S(50, 9), S(38, 12), S(29, 10), S(16, 19), S(5, 25), S(1, 6), S(10, 13), S(9, 18), S(32, 17), S(38, 6), S(8, 12), S(4, 6), S(29, 0), S(11, 0), S(28, 10), S(19, 12), S(15, 13), S(18, 18), S(31, 4), S(25, -1), S(28, -7), S(20, -2), S(28, -5), S(25, 2), S(8, 10), S(18, 8), S(12, 0), S(47, 6), S(10, -12), S(15, -13), S(17, 4), S(4, 18), S(-1, 14), S(-8, 18), S(0, 21), S(-18, 13), S(1, -7)};
constexpr Score ROOK_TABLE[] = {S(20, 44), S(24, 42), S(10, 49), S(35, 38), S(59, 36), S(16, 43), S(52, 35), S(60, 36), S(9, 46), S(11, 47), S(35, 41), S(48, 39), S(61, 27), S(97, 19), S(24, 40), S(58, 30), S(-19, 41), S(8, 38), S(15, 38), S(15, 37), S(30, 27), S(69, 22), S(117, 3), S(28, 19), S(-25, 37), S(-18, 35), S(-2, 41), S(16, 32), S(4, 37), S(31, 30), S(6, 27), S(-5, 32), S(-38, 35), S(-37, 41), S(-26, 40), S(-21, 38), S(-19, 34), S(4, 19), S(27, 16), S(-10, 17), S(-35, 21), S(-20, 27), S(-21, 19), S(-13, 22), S(-11, 21), S(-0, 17), S(19, 13), S(-7, 7), S(-35, 18), S(-18, 20), S(-25, 28), S(-15, 23), S(1, 17), S(19, 8), S(14, 3), S(-53, 23), S(-2, 23), S(-2, 24), S(4, 24), S(15, 17), S(11, 17), S(19, 19), S(-10, 24), S(7, 5)};
constexpr Score QUEEN_TABLE[] = {S(-23, 13), S(-16, 54), S(-0, 49), S(24, 31), S(105, 17), S(117, 9), S(68, 23), S(65, 30), S(-16, 13), S(-55, 38), S(-15, 47), S(-25, 65), S(-35, 90), S(69, 46), S(16, 71), S(55, 34), S(-15, -1), S(-17, 0), S(7, -8), S(-26, 71), S(21, 71), S(107, 32), S(93, 40), S(50, 81), S(-19, -1), S(-24, 25), S(-16, 30), S(-16, 39), S(-8, 71), S(11, 74), S(14, 92), S(4, 101), S(-3, -30), S(-12, 24), S(1, -1), S(-10, 43), S(5, 18), S(8, 46), S(11, 54), S(8, 42), S(-14, -2), S(17, -55), S(11, -6), S(14, -28), S(11, -6), S(14, 2), S(19, 15), S(4, 47), S(-16, -19), S(15, -48), S(27, -65), S(19, -28), S(28, -50), S(26, -35), S(30, -58), S(1, -24), S(5, -24), S(0, -34), S(20, -50), S(27, 4), S(13, -37), S(4, -52), S(9, -51), S(-33, -41)};
constexpr Score KING_TABLE[] = {S(-114, -90), S(214, -79), S(180, -61), S(157, -57), S(-132, 5), S(-80, 23), S(92, -18), S(70, -36), S(238, -71), S(75, 11), S(69, 10), S(94, 2), S(49, 13), S(65, 28), S(-3, 31), S(-134, 24), S(73, -5), S(103, 10), S(109, 18), S(38, 18), S(65, 11), S(120, 37), S(155, 29), S(-19, 8), S(23, -17), S(29, 21), S(14, 34), S(-24, 46), S(-34, 40), S(-14, 38), S(-7, 31), S(-94, 12), S(-63, -21), S(46, -10), S(-35, 30), S(-77, 47), S(-89, 51), S(-64, 37), S(-60, 20), S(-86, -6), S(-14, -28), S(-13, 1), S(-42, 19), S(-65, 36), S(-56, 34), S(-52, 23), S(-26, 7), S(-32, -18), S(-17, -32), S(-28, -11), S(-16, 6), S(-72, 20), S(-45, 17), S(-37, 9), S(-34, -1), S(-20, -26), S(-36, -73), S(-14, -42), S(-43, -16), S(-54, -10), S(-64, -18), S(-29, -21), S(-19, -29), S(-17, -71)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(46, -0), S(-2, 21), S(-58, -2)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(16, 6), S(1, 19), S(-26, 12)};
constexpr Score PAWN_PROTECTION[] = {S(-2, 11), S(-1, 21), S(-4, 21), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KING_PAWN_SHIELD[] = {S(39, -12), S(33, -10)};
constexpr Score PASSED_PAWN_BONUS = S(0, 22);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(5, -20);
constexpr Score ISOLATED_PAWN_PENALTY = S(-22, -9);
constexpr Score DOUBLED_PAWN_PENALTY = S(1, 1);
constexpr Score BISHOP_PAIR_BONUS = S(26, 65);
constexpr Score KNIGHT_MOBILITY = S(1, 1);
constexpr Score BISHOP_MOBILITY = S(5, 6);
constexpr Score ROOK_MOBILITY = S(4, 3);
constexpr Score QUEEN_MOBILITY = S(1, 6);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
