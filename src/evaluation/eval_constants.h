#pragma once
#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[] = {S(104, 99), S(414, 360), S(408, 352), S(546, 688), S(1300, 1256), S(0, 0)};
constexpr Score PAWN_TABLE[] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(199, 165), S(212, 152), S(133, 150), S(208, 95), S(154, 110), S(164, 110), S(10, 168), S(11, 191), S(-14, 107), S(11, 101), S(49, 71), S(62, 48), S(70, 35), S(87, 38), S(1, 74), S(-3, 84), S(-12, 32), S(3, 17), S(10, 9), S(38, -19), S(34, -6), S(40, -1), S(12, 11), S(-10, 19), S(-17, 13), S(-12, 5), S(3, -10), S(23, -18), S(20, -9), S(23, -15), S(4, -6), S(-12, -2), S(-16, 2), S(-24, 4), S(-2, -7), S(5, -9), S(10, 5), S(-6, 5), S(-8, -4), S(-24, -2), S(-25, 24), S(-24, 17), S(-24, 25), S(-17, 19), S(-18, 31), S(-3, 23), S(-7, 9), S(-42, 5), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KNIGHT_TABLE[] = {S(-216, -25), S(-140, 13), S(-60, 41), S(-14, 17), S(92, 10), S(-141, 31), S(-27, -28), S(-135, -81), S(-31, 6), S(-36, 31), S(64, 25), S(26, 62), S(23, 49), S(70, 19), S(-27, 25), S(-21, -0), S(-26, 10), S(54, 28), S(62, 61), S(90, 64), S(107, 42), S(122, 47), S(64, 30), S(39, -11), S(23, 17), S(39, 45), S(52, 69), S(76, 75), S(46, 81), S(79, 72), S(35, 52), S(42, 22), S(6, 18), S(16, 35), S(42, 61), S(44, 70), S(58, 64), S(44, 62), S(63, 38), S(14, 25), S(-9, -16), S(11, 28), S(34, 26), S(37, 56), S(52, 40), S(42, 20), S(37, 4), S(-2, 13), S(-26, -19), S(-15, 6), S(12, 16), S(24, 36), S(23, 44), S(28, 10), S(5, 18), S(20, -25), S(-108, -10), S(-6, -23), S(-31, 12), S(-14, 25), S(6, 10), S(5, 14), S(-4, -9), S(-41, -39)};
constexpr Score BISHOP_TABLE[] = {S(-34, 24), S(12, 21), S(-98, 45), S(-58, 42), S(-56, 45), S(-79, 39), S(-3, 28), S(-1, 20), S(-35, 38), S(14, 24), S(-2, 37), S(-32, 38), S(20, 34), S(37, 25), S(-3, 31), S(-49, 39), S(-1, 31), S(30, 25), S(50, 20), S(23, 26), S(39, 19), S(46, 32), S(50, 33), S(3, 47), S(-10, 30), S(18, 33), S(9, 36), S(60, 22), S(42, 24), S(40, 23), S(23, 39), S(7, 42), S(6, 20), S(10, 28), S(16, 32), S(42, 29), S(45, 17), S(14, 24), S(11, 18), S(37, 10), S(14, 12), S(34, 23), S(25, 22), S(21, 23), S(23, 31), S(33, 18), S(29, 13), S(33, 7), S(23, 7), S(35, 3), S(32, 12), S(13, 24), S(23, 20), S(20, 7), S(51, 20), S(14, 2), S(32, -5), S(25, 16), S(7, 33), S(9, 23), S(-10, 31), S(5, 33), S(-8, 30), S(5, 3)};
constexpr Score ROOK_TABLE[] = {S(25, 52), S(31, 50), S(-7, 60), S(10, 54), S(44, 48), S(11, 53), S(31, 47), S(60, 48), S(9, 55), S(8, 58), S(31, 51), S(42, 53), S(62, 37), S(83, 30), S(19, 51), S(50, 40), S(-16, 50), S(13, 44), S(23, 45), S(24, 44), S(45, 31), S(78, 28), S(121, 11), S(33, 26), S(-14, 42), S(-15, 44), S(8, 47), S(27, 38), S(5, 46), S(31, 40), S(1, 36), S(-1, 38), S(-28, 37), S(-33, 46), S(-23, 46), S(-15, 42), S(-9, 39), S(6, 24), S(22, 26), S(-7, 21), S(-32, 23), S(-24, 33), S(-20, 25), S(-14, 28), S(-12, 28), S(5, 19), S(18, 16), S(-4, 9), S(-34, 21), S(-14, 19), S(-18, 31), S(-12, 25), S(0, 23), S(12, 14), S(14, 8), S(-57, 28), S(1, 31), S(-0, 31), S(6, 31), S(16, 22), S(14, 23), S(20, 24), S(-7, 27), S(7, 11)};
constexpr Score QUEEN_TABLE[] = {S(-26, -3), S(-36, 48), S(-31, 51), S(0, 18), S(59, 28), S(65, 11), S(76, 4), S(69, 6), S(-13, 17), S(-46, 37), S(-19, 56), S(-16, 62), S(-32, 83), S(28, 59), S(8, 62), S(59, 18), S(-7, 5), S(-6, 13), S(4, 15), S(-34, 84), S(-17, 88), S(77, 43), S(76, 32), S(5, 83), S(-12, 2), S(-14, 35), S(-17, 43), S(-19, 57), S(-10, 78), S(15, 58), S(21, 81), S(6, 87), S(1, -17), S(-5, 34), S(9, 10), S(-3, 51), S(8, 32), S(18, 47), S(25, 45), S(18, 18), S(-14, 3), S(26, -49), S(20, -3), S(15, -17), S(20, -1), S(23, 5), S(35, -5), S(13, 27), S(-17, -7), S(17, -49), S(32, -52), S(24, -19), S(35, -40), S(37, -55), S(37, -70), S(5, -31), S(15, -33), S(4, -37), S(27, -43), S(32, 13), S(22, -39), S(11, -59), S(19, -58), S(-14, -62)};
constexpr Score KING_TABLE[] = {S(-95, -98), S(185, -77), S(199, -61), S(149, -60), S(-135, 3), S(-88, 26), S(98, -17), S(-7, -27), S(202, -64), S(89, 12), S(94, 10), S(106, 4), S(57, 15), S(102, 22), S(8, 35), S(-166, 24), S(54, -0), S(111, 14), S(127, 20), S(55, 13), S(85, 8), S(148, 34), S(175, 29), S(-29, 12), S(16, -17), S(49, 17), S(26, 33), S(5, 39), S(-21, 34), S(23, 28), S(20, 22), S(-108, 11), S(-79, -17), S(75, -18), S(9, 19), S(-40, 40), S(-48, 39), S(-28, 22), S(-27, 8), S(-90, -9), S(-30, -24), S(-12, -1), S(-23, 14), S(-39, 29), S(-28, 27), S(-26, 14), S(-12, 1), S(-41, -18), S(-21, -32), S(-32, -9), S(-15, 8), S(-78, 24), S(-47, 20), S(-39, 13), S(-36, 1), S(-31, -24), S(-52, -75), S(-17, -44), S(-55, -12), S(-73, -5), S(-81, -13), S(-48, -13), S(-32, -25), S(-29, -75)};
constexpr Score OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(47, 3), S(-3, 29), S(-59, -0)};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {S(0, 0), S(0, 0), S(0, 0), S(19, 9), S(2, 26), S(-23, 10)};
constexpr Score PAWN_PROTECTION[] = {S(-2, 13), S(-1, 21), S(-3, 22), S(0, 0), S(0, 0), S(0, 0)};
constexpr Score KING_PAWN_SHIELD[] = {S(38, -13), S(31, -8)};
constexpr Score KING_RING_ATTACK_BONUS[] = {S(17, -13), S(30, -13), S(22, -8), S(34, -10), S(31, 6), S(0, 0)};
constexpr Score CHECK_BONUS[] = {S(223, -20), S(102, -1), S(58, 52), S(115, -13), S(65, 71), S(0, 0)};
constexpr Score PASSED_PAWN_BONUS = S(-0, 23);
constexpr Score BLOCKED_PASSED_PAWN_PENALTY = S(4, -20);
constexpr Score ISOLATED_PAWN_PENALTY = S(-20, -8);
constexpr Score DOUBLED_PAWN_PENALTY = S(-18, -20);
constexpr Score BISHOP_PAIR_BONUS = S(28, 72);
constexpr Score KNIGHT_MOBILITY = S(0, 1);
constexpr Score BISHOP_MOBILITY = S(5, 7);
constexpr Score ROOK_MOBILITY = S(4, 3);
constexpr Score QUEEN_MOBILITY = S(1, 4);

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
