#include "move_generation/types.h"
#include "types.h"

//
// Created by Archishmaan Peyyety on 1/10/23.
//

// Pawn Bonuses
constexpr Score PASSED_PAWN_BONUS = S(1, 16);
constexpr Score ISOLATED_PAWN_PENALTY = S(-20, -13);
// Bishop Bonuses
constexpr Score BISHOP_PAIR_BONUS = S(32, 52);

// If this is updated be sure compute_game_phase loop is also updated. Currently only checks non-zeros.
constexpr int GAME_PHASE_BONUS[NPIECE_TYPES] = {
		0, 1, 1, 2, 4, 0
};

constexpr Score PIECE_VALUES[NPIECE_TYPES] = {
		S(89, 77), S(379, 290), S(388, 307), S(533, 549), S(1163, 998), S(0,0),
};

constexpr Score PAWN_TABLE[NSQUARES] = {
		S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),
		S(104, 149), S(145, 126), S(80, 115), S(129, 81), S(93, 96), S(159, 73), S(25, 128), S(-25, 166),
		S(-2, 86), S(3, 80), S(32, 58), S(39, 30), S(77, 9), S(89, 19), S(27, 53), S(-5, 68),
		S(-14, 31),S(6, 15), S(13, 5), S(32, -18), S(34, -11), S(24, -3), S(17, 5), S(-12, 15),
		S(-30, 17), S(-15, 8),S(-2, -2), S(20, -14), S(25, -10), S(15, -8), S(4, -4), S(-18, 2),
		S(-27, 7), S(-18, 4), S(-1, -6),S(-8, 3), S(7, 3), S(12, -4), S(29, -14), S(-3, -7),
		S(-39, 23),S(-17, 6), S(-21, 15), S(-24, 20), S(-16, 19), S(32, 0), S(32, -9), S(-16, -1),
		S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),	S(0, 0),
};

constexpr Score KNIGHT_TABLE[NSQUARES] = {
		S(-205, -40), S(-106, -30), S(-37, -4), S(-38, -23), S(95, -37), S(-110, -15), S(-15, -61), S(-118, -91), S(-77, -17), S(-44, 1), S(85, -26), S(38, 4), S(32, -5), S(82, -28), S(5, -19), S(-6, -49), S(-40, -21), S(77, -20), S(52, 14), S(82, 11), S(112, -9), S(154, -14), S(97, -23), S(65, -47), S(-5, -13), S(30, 8), S(31, 30), S(71, 26), S(55, 26), S(90, 12), S(33, 9), S(33, -15), S(-4, -11), S(17, -1), S(28, 22), S(24, 33), S(41, 22), S(34, 22), S(33, 10), S(3, -13), S(-14, -19), S(1, 6), S(25, 0), S(24, 19), S(33, 15), S(33, -4), S(39, -16), S(-5, -25), S(-23, -35), S(-54, -10), S(-2, -3), S(7, 2), S(9, 6), S(32, -18), S(-8, -20), S(-8, -43), S(-128, -8), S(-13, -46), S(-57, -13), S(-31, -9), S(-5, -19), S(-19, -16), S(-9, -44), S(-13, -71)
};

constexpr Score BISHOP_TABLE[NSQUARES] = {
		S(-33, -9), S(5, -17), S(-121, 6), S(-62, 1), S(-47, 8), S(-44, -1), S(-2, -6), S(-3, -23), S(-24, -2), S(14, 0), S(-15, 12), S(-25, -1), S(41, -1), S(65, -7), S(20, 1), S(-45, -7), S(-11, 6), S(45, -6), S(55, 2), S(49, 1), S(45, 1), S(75, 4), S(45, 3), S(6, 7), S(3, 1), S(15, 13), S(29, 16), S(61, 14), S(49, 17), S(47, 11), S(16, 5), S(3, 7), S(-2, -1), S(22, 7), S(22, 18), S(35, 25), S(46, 11), S(22, 10), S(18, 0), S(10, -5), S(7, -7), S(25, 2), S(22, 14), S(25, 13), S(22, 17), S(39, 4), S(27, -3), S(16, -13), S(13, -10), S(26, -20), S(26, -5), S(7, 6), S(18, 5), S(27, -4), S(46, -24), S(13, -30), S(-37, -17), S(2, -3), S(-9, -12), S(-17, -1), S(-11, -4), S(-7, -5), S(-35, 2), S(-23, -13)
};

constexpr Score ROOK_TABLE[NSQUARES] = {
		S(49, 18), S(70, 11), S(40, 25), S(96, 9), S(92, 11), S(11, 22), S(28, 18), S(51, 11), S(48, 14), S(44, 18), S(88, 9), S(92, 9), S(115, -11), S(104, -1), S(36, 15), S(62, 6), S(-1, 17), S(27, 15), S(35, 12), S(43, 13), S(21, 12), S(68, -5), S(90, -9), S(26, 1), S(-23, 17), S(-9, 14), S(10, 23), S(33, 8), S(28, 10), S(41, 5), S(4, 4), S(-15, 13), S(-43, 20), S(-27, 19), S(-11, 20), S(-0, 16), S(8, 7), S(-7, 5), S(17, -2), S(-25, 3), S(-51, 14), S(-21, 13), S(-14, 6), S(-20, 13), S(3, 2), S(-1, -1), S(1, -0), S(-33, -3), S(-50, 9), S(-13, 5), S(-20, 12), S(-11, 15), S(0, 1), S(8, 1), S(-3, -3), S(-74, 12), S(-23, 9), S(-14, 16), S(1, 16), S(12, 12), S(15, 5), S(-3, 6), S(-31, 15), S(-24, -7)
};

constexpr Score QUEEN_TABLE[NSQUARES] = {
		S(-38, 2), S(-5, 34), S(14, 34), S(15, 35), S(123, -14), S(127, -30), S(67, -9), S(49, 29), S(-19, -18), S(-45, 31), S(-8, 43), S(3, 52), S(-32, 86), S(75, 15), S(27, 37), S(67, -7), S(-3, -27), S(-11, 5), S(12, 7), S(-1, 67), S(31, 56), S(76, 28), S(62, 14), S(64, 5), S(-31, 14), S(-27, 36), S(-15, 31), S(-15, 54), S(-3, 73), S(9, 62), S(-2, 77), S(-1, 55), S(-5, -26), S(-28, 39), S(-7, 23), S(-11, 62), S(-2, 39), S(0, 39), S(2, 51), S(2, 21), S(-18, 3), S(8, -32), S(-8, 22), S(3, -3), S(-2, 16), S(5, 19), S(17, 12), S(3, 24), S(-35, -18), S(-4, -27), S(17, -33), S(7, -23), S(15, -27), S(24, -36), S(1, -39), S(8, -39), S(-1, -34), S(-15, -31), S(-5, -27), S(13, -24), S(-15, -3), S(-28, -30), S(-42, -6), S(-50, -46)
};

constexpr Score KING_TABLE[NSQUARES] = {
		S(-76, -73), S(169, -68), S(150, -50), S(77, -38), S(-150, 13), S(-88, 28), S(32, -2), S(47, -24), S(201, -54), S(53, 6), S(19, 8), S(102, -4), S(31, 11), S(29, 31), S(-42, 28), S(-138, 35), S(68, -7), S(62, 9), S(78, 9), S(19, 11), S(25, 10), S(101, 29), S(114, 24), S(-19, 11), S(12, -19), S(-21, 22), S(9, 22), S(-58, 36), S(-54, 33), S(-53, 41), S(-13, 28), S(-87, 14), S(-86, -10), S(9, -7), S(-72, 33), S(-125, 45), S(-131, 48), S(-87, 38), S(-79, 21), S(-100, 2), S(-3, -23), S(-19, -0), S(-50, 19), S(-89, 34), S(-84, 37), S(-74, 30), S(-26, 10), S(-48, -4), S(4, -34), S(7, -14), S(-31, 11), S(-96, 25), S(-75, 25), S(-45, 14), S(6, -7), S(15, -27), S(-17, -63), S(41, -50), S(5, -27), S(-92, -2), S(-9, -28), S(-53, -8), S(26, -37), S(23, -62)
};

// TODO: This kinda slow. Like 8 conditionals when it could just be PST[COLOR][TYPE][SQUARE]
template<Color color>
constexpr Score read_psqt(PieceType piece_type, Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}

constexpr Score MOBILITY_KNIGHT[9] = {
		S(-31,-38), S(-27,-28), S(-6,-15), S( -1,-8), S(  1,  3), S( 6, 6),
		S( 10, 8), S( 14, 10), S( 36, 25)
};

constexpr Score MOBILITY_BISHOP[14] = {
		S(-24,-28), S(-10,-24), S( 7, -4), S( 14, 6), S( 20, 10), S( 25, 20),
		S( 26, 28), S( 30, 28), S( 31, 32), S( 34, 36), S( 39, 39), S( 41, 43),
		S( 45, 44), S( 48, 49)
};

constexpr Score MOBILITY_ROOK[15] = {
		S(-30,-41), S(-12,-7), S(  0, 8), S(  1, 21), S(  2, 36), S( 7,50),
		S( 10,51), S( 15,61), S( 20,66), S(20 ,69), S( 20,75), S( 22,80),
		S( 28,82), S( 29,85), S( 33,87)
};

/*
constexpr Score MOBILITY_QUEEN[28] = {
		S(-19,-28), S(-8,-18),	S( -4, -4), S( -4, 9),
		S( 9, 19),	S( 12, 27),	S( 11, 29), S( 18, 36),
		S( 20, 36), S( 26, 47),	S( 32, 47),	S( 34,50),
		S( 34,62),	S( 35,64),	S( 35,66),	S( 35,66),
		S( 35,68),	S( 36,70),	S( 37,73),	S( 38,74),
		S( 45,76),	S(52,84),	S(52,85),	S(53,85),
		S( 56,89),	S(57,92),	S(57,93),	S(59,110)
};
*/

constexpr Score MOBILITY_QUEEN[28] = {
		S(-20,-30), S(-10,-20),	S( -5, -5), S( 0, 0),
		S( 10, 20),	S( 10, 30),	S( 10, 30), S( 15, 35),
		S( 20, 35), S( 25, 50),	S( 30, 50),	S( 35,50),
		S( 35, 60),	S( 35,65),	S( 35,65),	S( 35,65),
		S( 35, 70),	S( 25,70),	S( 37,70),	S( 40,75),
		S( 45,75),	S(50,85),	S(50,85),	S(55,85),
		S( 55,90),	S(55,90),	S(55,95),	S(60,100)
};
